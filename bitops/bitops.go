package bitops

import "fmt"

/*
一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。
*/

/*
能够把袁术数组分为两个子数组，每个子数组中包含一个只出现一次的数组，其他数字出现两次
这两个数字不一样，所以亦或结果部位0，结果至少有一位是1，找到第一个为1的位置，记为第N位。
以第N位是否为1作为便准把原数组分为两个子数组。
11001 是最后的亦或值，第一个（随便一位即可）出现1的位置，如最后一位，这说明该位 两个值不一样
以最后以为是否为1来分割数组，则两个奇数必然分割到不同的数组中，如果数字相同，则必然不会分隔到不同的数组中
*/

func FindNum(arr []int){
	res:=0
	for i:=0;i<len(arr);i++{
		res^=arr[i]
	}
	res2:=res
	res3:=res
	var pos uint=0
	for res2&1==0{
		pos++
		res2>>=1
	}
	for i:=0;i<len(arr);i++{
		if (arr[i]>>pos) &1 ==1{
			res3^=arr[i]
		}
	}
	fmt.Println(res3,res3^res)
}
